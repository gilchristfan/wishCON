package org.saJava.GUI;

import org.saJava.connect.WizCON;
import org.saJava.connect.WizOUT;
import org.saJava.connect.WizSysTray;
import org.saJava.preferences.UserSettings;
import sun.awt.WindowClosingListener;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 * User: Goldberg
 * Date: 2/27/13
 * Time: 7:08 PM
 * To change this template use File | Settings | File Templates.
 */
public class launchUI extends JDialog{

    javax.swing.JButton jButton1;
    javax.swing.JButton jButton2;
    javax.swing.JButton jButton3;
    javax.swing.JCheckBox jCheckBox1;
    javax.swing.JDialog jDialog1;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JPasswordField jPasswordField2;
    javax.swing.JTextField jTextField2;
    JButton jButton4;
    final UserSettings userSettings=new UserSettings();
    private JDialog frame=this;


    public launchUI(){
        setDefaultLookAndFeelDecorated(true);

       setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
       this.addWindowListener(new WindowAdapter() {
            /**
             * Invoked when a window is in the process of being closed.
             * The close operation can be overridden at this point.
             */
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);    //To change body of overridden methods use File | Settings | File Templates.
                if(jCheckBox1.isSelected())
                   userSettings.prefs.put(userSettings.pCheckBox,"selected");
                else
                    userSettings.prefs.put(userSettings.pCheckBox,"");

                new WizSysTray().getSetSysTray();
                //System.exit(0);
            }



       });
       //setDefaultLookAndFeelDecorated(true);

       setResizable(false);
       setSize(300,100);
       setBounds(450,200,300,100);
       setTitle("Wishnet Portal");
       initComponents();

        userSettings.setPreference();
        if(userSettings.prefs.get(userSettings.pPasswd,"").equals(""))
               jPasswordField2.setText("");


        if(!WizCON.status){
            jButton2.setEnabled(false);
            jButton4.setEnabled(false);
            WizCON.status=true;
        }
        else{
            try {

                   if(WizCON.message.equals("noEthernet")){
                       jButton2.setEnabled(false);
                       jButton1.setEnabled(false);
                       jButton4.setEnabled(false);
                       ImageIcon icon=new ImageIcon(getClass().getResource("image/error.png"));
                       JOptionPane.showMessageDialog(this,"Ethernet may be disabled or not working.Please check.","Oops..",JOptionPane.INFORMATION_MESSAGE,icon);

                   }
                   else if(WizCON.message.equals("connectTimeOut"))
                   {
                       System.out.print("Connection Failed.Try Later");
                       jButton2.setEnabled(false);
                       jButton1.setEnabled(false);
                       jButton4.setEnabled(false);
                       ImageIcon icon=new ImageIcon(getClass().getResource("image/error.png"));
                       JOptionPane.showMessageDialog(this,"Connection Failure.Try Later","Oops",JOptionPane.INFORMATION_MESSAGE,icon);

                   }
                   else if(WizCON.message.equals("noRoute")){
                       System.out.print("Rj45 disconnected.Please Check");
                       jButton2.setEnabled(false);
                       jButton1.setEnabled(false);
                       jButton4.setEnabled(false);
                       ImageIcon icon=new ImageIcon(getClass().getResource("image/error.png"));

                       JOptionPane.showMessageDialog(this,"RJ45 Disconnected.Please Check.","Oops..",JOptionPane.INFORMATION_MESSAGE,icon);
                   }
                   else
                   {
                    if(WizCON.checkCon())  {
                        jButton2.setEnabled(false);
                        jButton4.setEnabled(false);
                    }
                    else
                        jButton1.setEnabled(false);
                   }
                WizCON.message="";

            } catch (IOException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }

        keyListeners();
        mouseActionListeners();

    }

       /**
        * This method is called from within the constructor to initialize the form.
        * WARNING: Do NOT modify this code. The content of this method is always
        * regenerated by the Form Editor.
        */

       private void initComponents() {


           jDialog1 = new javax.swing.JDialog();
           jCheckBox1 = new javax.swing.JCheckBox();
           jButton1 = new javax.swing.JButton();
           jButton2 = new javax.swing.JButton();
           jButton3 = new javax.swing.JButton();
           userSettings.setPreference();
           if((userSettings.prefs.get(userSettings.pUname,"")!=null && userSettings.prefs.get(userSettings.pUname,"").equals(""))
                   ||userSettings.prefs.get(userSettings.pPasswd,"").equals("")
                   || !userSettings.prefs.get(userSettings.pCheckBox,"").equals("selected"))
                jTextField2 = new javax.swing.JTextField();
           else
                jTextField2=new javax.swing.JTextField(userSettings.prefs.get(userSettings.pUname,""));

           if(userSettings.prefs.get(userSettings.pPasswd,"")!=null && userSettings.prefs.get(userSettings.pPasswd,"").equals("")
                   || !userSettings.prefs.get(userSettings.pCheckBox,"").equals("selected"))
               jPasswordField2 = new javax.swing.JPasswordField();
           else
               jPasswordField2 = new javax.swing.JPasswordField(userSettings.prefs.get(userSettings.pPasswd,""));

           if(userSettings.prefs.get(userSettings.pCheckBox,"")!=null &&
                   userSettings.prefs.get(userSettings.pCheckBox,"").equals("selected") )
               jCheckBox1.setSelected(true);

           jLabel3 = new javax.swing.JLabel();
           jLabel4 = new javax.swing.JLabel();

           jButton4 = new javax.swing.JButton();


           javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
           jDialog1.getContentPane().setLayout(jDialog1Layout);
           jDialog1Layout.setHorizontalGroup(
                   jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGap(0, 400, Short.MAX_VALUE)
           );
           jDialog1Layout.setVerticalGroup(
                   jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGap(0, 300, Short.MAX_VALUE)
           );

           setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

           jLabel3.setText("Username");

           jLabel4.setText("Password");

           jCheckBox1.setText("Remember Me");

           jButton1.setText("Login");

           jButton2.setText("Logout");

           jButton3.setText("Exit");

           jButton4.setText("Info");

           javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
           getContentPane().setLayout(layout);
           layout.setHorizontalGroup(
                   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                   .addContainerGap(60, Short.MAX_VALUE)
                                   .addComponent(jButton1)
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                   .addComponent(jButton2)
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                   .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                   .addGap(55, 55, 55))
                           .addGroup(layout.createSequentialGroup()
                                   .addGap(74, 74, 74)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                           .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                           .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                                   .addGap(0, 0, Short.MAX_VALUE)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                           .addComponent(jPasswordField2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                           .addComponent(jTextField2))
                                   .addGap(70, 70, 70))
                           .addGroup(layout.createSequentialGroup()
                                   .addGap(15, 15, 15)
                                   .addComponent(jCheckBox1)
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                   .addComponent(jButton4)
                                   .addContainerGap())
           );

           layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

           layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPasswordField2, jTextField2});

           layout.setVerticalGroup(
                   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                                   .addGap(17, 17, 17)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                           .addComponent(jCheckBox1)
                                           .addComponent(jButton4))
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                           .addComponent(jLabel3)
                                           .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                           .addComponent(jLabel4)
                                           .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                   .addGap(31, 31, 31)
                                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                           .addComponent(jButton1)
                                           .addComponent(jButton2)
                                           .addComponent(jButton3))
                                   .addContainerGap(20, Short.MAX_VALUE))
           );

           layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

           layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPasswordField2, jTextField2});

           layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel4});

           jButton1.requestFocus();
           jButton1.requestFocusInWindow();
           pack();
       }// </editor-fold>

       private void keyListeners(){
           jButton1.addKeyListener(new KeyAdapter() {
               /**
                * Invoked when a key has been pressed.
                */
               @Override
               public void keyPressed(KeyEvent e) {
                   super.keyPressed(e);
                   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                       jButton1.doClick();
                   }
               }
           });
           jButton2.addKeyListener(new KeyAdapter() {
               /**
                * Invoked when a key has been pressed.
                */
               @Override
               public void keyPressed(KeyEvent e) {
                   super.keyPressed(e);
                   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                       jButton2.doClick();
                   }
               }
           });
           jButton3.addKeyListener(new KeyAdapter() {
               /**
                * Invoked when a key has been pressed.
                */
               @Override
               public void keyPressed(KeyEvent e) {
                   super.keyPressed(e);
                   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                       jButton3.doClick();
                   }
               }
           });
           jButton4.addKeyListener(new KeyAdapter() {
               /**
                * Invoked when a key has been pressed.
                */
               @Override
               public void keyPressed(KeyEvent e) {
                   super.keyPressed(e);
                   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                       jButton4.doClick();
                   }
               }
           });

       }

       private void mouseActionListeners(){
           jButton1.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   try {
                       if(!WizCON.checkCon() && WizCON.message=="connectTimeOut")
                       {
                           System.out.print("Connection Failed.Try Later");
                           JOptionPane.showMessageDialog(frame,"Connection Failure.Try Later");
                           return;
                       }
                       else if(!WizCON.checkCon() && WizCON.message=="noRoute"){
                           System.out.print("Rj45 disconnected.Please Check");
                           JOptionPane.showMessageDialog(frame,"RJ45 Disconnected.Please Check.");
                           return;
                       }
                       else if(WizCON.message.equals("noEthernet")){
                           jButton2.setEnabled(false);
                           jButton1.setEnabled(false);
                           JOptionPane.showMessageDialog(frame,"Ethernet may be disabled or not working.Please check.");
                           return;
                       }
                       else if(!WizCON.checkCon() && WizCON.message=="mLogin"){
                           System.out.print("You Already Logged in Manually");
                           JOptionPane.showMessageDialog(frame,"You have already logged in from browser");
                           jButton1.setEnabled(false);
                           jButton2.setEnabled(true);
                           return;
                       }
                       WizCON.message="";

                   } catch (IOException e1) {
                       e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                   }
                   WizCON.connect(jTextField2.getText(),jPasswordField2.getText());
                   userSettings.prefs.put(userSettings.pUname,jTextField2.getText());
                   if(jCheckBox1.isSelected()){
                       userSettings.prefs.put(userSettings.pCheckBox,"selected");
                       userSettings.prefs.put(userSettings.pPasswd,jPasswordField2.getText());
                   }
                   else
                   {
                       userSettings.prefs.remove(userSettings.pPasswd);
                       userSettings.prefs.remove(userSettings.pCheckBox);
                   }

                   SwingUtilities.invokeLater(new Runnable() {
                       @Override
                       public void run() {
                           setVisible(false);
                           WizCON.status=false;
                           new Progress("Validating").setVisible(true);
                       }
                   });
               }
           });

           jButton2.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   try {
                       if(WizOUT.disConnect()){
                           System.out.println("Logged out in launchUI");
                           //frame.setVisible(false);
                           ImageIcon icon=new ImageIcon(getClass().getResource("image/success.png"));
                           JOptionPane.showMessageDialog(frame, "Successfully logged out","Thank You",JOptionPane.INFORMATION_MESSAGE,icon);
                           jButton1.setEnabled(true);
                           jButton2.setEnabled(false);
                           jButton4.setEnabled(false);

                       }
                       else if(WizCON.message.equals("noRoute")){
                           JOptionPane.showMessageDialog(frame,"RJ45 Disconnected.Please Check");
                           jButton1.setEnabled(false);
                           jButton2.setEnabled(false);
                       }
                       else if(WizCON.message.equals("mLogout")){
                           JOptionPane.showMessageDialog(frame,"You have already logged out manually.");
                           jButton1.setEnabled(true);
                           jButton2.setEnabled(false);
                           jButton4.setEnabled(false);
                       }
                       else if(WizCON.message.equals("noEthernet")){
                           jButton2.setEnabled(false);
                           jButton1.setEnabled(false);
                           JOptionPane.showMessageDialog(frame,"Ethernet may be disabled or not working.Please check.");
                           return;
                       }
                       else if(WizCON.message.equals("connectTimeOut")){
                           JOptionPane.showMessageDialog(frame,"Server Down.Try Logging out Later");
                           jButton1.setEnabled(false);
                           jButton2.setEnabled(true);
                       }
                       WizCON.message="";

                   } catch (IOException e1) {
                       e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                   }

               }
           });

           jButton3.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   //To change body of implemented methods use File | Settings | File Templates.
                   if(jCheckBox1.isSelected())
                       userSettings.prefs.put(userSettings.pCheckBox, "selected");
                   else
                       userSettings.prefs.put(userSettings.pCheckBox, "");

                   frame.dispose();
                   System.exit(0);
               }
           });

           jButton4.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   //To change body of implemented methods use File | Settings | File Templates.
                   try {
                       if(!WizCON.checkCon() && WizCON.message=="connectTimeOut")
                       {
                           System.out.print("Connection Failed.Try Later");
                           JOptionPane.showMessageDialog(frame,"Connection Failure.Try Later");
                           return;
                       }
                       else if(!WizCON.checkCon() && WizCON.message=="noRoute"){
                           System.out.print("Rj45 disconnected.Please Check");
                           JOptionPane.showMessageDialog(frame,"RJ45 Disconnected.Please Check.");
                           return;
                       }
                       else if(WizCON.message.equals("noEthernet")){
                           jButton2.setEnabled(false);
                           jButton1.setEnabled(false);
                           JOptionPane.showMessageDialog(frame,"Ethernet may be disabled or not working.Please check.");
                           return;
                       }
                       WizCON.message="";

                   } catch (IOException e1) {
                       e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                   }
                   try {
                       WizCON.getUserDetails();

                   } catch (IOException e1) {
                       e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                   }
                   dispose();
                   new Progress("Fetching Data").setVisible(true);
               }
           });

       }



}
